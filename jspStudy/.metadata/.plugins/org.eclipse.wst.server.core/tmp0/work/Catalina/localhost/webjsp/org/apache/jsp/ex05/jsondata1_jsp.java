/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.90
 * Generated at: 2024-07-09 00:13:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ex05;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class jsondata1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/include/bootstrap_include.jsp", Long.valueOf(1720079130288L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>JSON Data</title>\r\n");
      out.write("\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\">");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<div>\r\n");
      out.write("			<a href=\"#\" id=\"checkJson\" class=\"link-underline-danger\">JSON Data 보내기</a>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div>\r\n");
      out.write("			<a href=\"#\" id=\"checkJson2\" class=\"link-underline-danger\">JSON Data2 보내기</a>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div>\r\n");
      out.write("			<a href=\"#\" id=\"checkJson3\" class=\"link-underline-danger\">JSON Data3 보내기</a>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div>\r\n");
      out.write("			<a href=\"#\" id=\"checkJson4\" class=\"link-underline-danger\">Ajax 서버와 JSON Data 보내기/받기</a>\r\n");
      out.write("		</div>\r\n");
      out.write("		<br>\r\n");
      out.write("		<div id=\"output\" class=\"alert alert-primary\">\r\n");
      out.write("			result\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("	<script>\r\n");
      out.write("		$(function() {\r\n");
      out.write("			\r\n");
      out.write("			//console.log(\"jquery...\")\r\n");
      out.write("			$(\"#checkJson\").click(function(){\r\n");
      out.write("				console.log(\"click\");\r\n");
      out.write("				\r\n");
      out.write("				/* var jsonStr = {name : [\"홍길동\", \"이순신\", \"동길이\"]}\r\n");
      out.write("				console.log(jsonStr)\r\n");
      out.write("				console.log(jsonStr.name)\r\n");
      out.write("				console.log(jsonStr.name[0])\r\n");
      out.write("				console.log(jsonStr.name[1])\r\n");
      out.write("				console.log(jsonStr.name[2]) */\r\n");
      out.write("				\r\n");
      out.write("				//JSON 구조의 문자열\r\n");
      out.write("				var jsonStr2 = '{\"name\" : [\"홍길동\", \"이순신\", \"동길이\"]}'\r\n");
      out.write("				let jsonInfo = JSON.parse(jsonStr2);\r\n");
      out.write("				console.log(jsonInfo);\r\n");
      out.write("				\r\n");
      out.write("				output += \"<br>\"\r\n");
      out.write("				output += \"====\"\r\n");
      out.write("				output += \"<br>\"\r\n");
      out.write("				for(let idx in jsonInfo.name) {\r\n");
      out.write("					output += jsonInfo.name[idx] + \"<br>\"\r\n");
      out.write("				}\r\n");
      out.write("				console.log(output); // 문자열\r\n");
      out.write("				\r\n");
      out.write("				$(\"#output\").html(output) // HTML객체로 전환\r\n");
      out.write("			})\r\n");
      out.write("			\r\n");
      out.write("			$(\"#checkJson2\").click(function() {\r\n");
      out.write("				console.log(\"click\")\r\n");
      out.write("				var jsonStr = '{\"name\" : \"홍길동\", \"age\" : 10, \"gender\" : \"남자\", \"nickname\" : \"돌이\"}';\r\n");
      out.write("				\r\n");
      out.write("				//문자열 -> 객체 전환\r\n");
      out.write("				console.log(jsonStr); //문자열\r\n");
      out.write("				var jsonObj = JSON.parse(jsonStr);\r\n");
      out.write("				console.log(jsonObj);\r\n");
      out.write("				\r\n");
      out.write("				//객체 전환 -> 문자열\r\n");
      out.write("				var jsonStr3 = JSON.stringify(jsonObj);\r\n");
      out.write("				console.log(jsonStr3)\r\n");
      out.write("				\r\n");
      out.write("				//var 전역변수\r\n");
      out.write("				var output = \"<br>\"\r\n");
      out.write("				var output = \"====\"\r\n");
      out.write("				var output = \"<br>\"\r\n");
      out.write("				\r\n");
      out.write("				output += \"이름 : \" + jsonObj.name + \"<br>\"; \r\n");
      out.write("				output += \"나이 : \" + jsonObj.age + \"<br>\"; \r\n");
      out.write("				output += \"성별 : \" + jsonObj.gender + \"<br>\"; \r\n");
      out.write("				output += \"별명 : \" + jsonObj.nickname + \"<br>\"; \r\n");
      out.write("				console.log(output);\r\n");
      out.write("				\r\n");
      out.write("				$(\"#output\").html(output);\r\n");
      out.write("			})\r\n");
      out.write("			\r\n");
      out.write("			$(\"#checkJson3\").click(function(){\r\n");
      out.write("				var jsonInfoArray = {\r\n");
      out.write("					member: [\r\n");
      out.write("						{name : \"홍길동\", age : 10, gender : \"남자\", nickname : \"돌이\"}, \r\n");
      out.write("						{name : \"홍길동\", age : 11, gender : \"여자\", nickname : \"돌이\"}, \r\n");
      out.write("						{name : \"홍길동\", age : 12, gender : \"여자\", nickname : \"돌이\"} \r\n");
      out.write("						]\r\n");
      out.write("				};\r\n");
      out.write("				console.log(jsonInfoArray);\r\n");
      out.write("				console.log(jsonInfoArray.member[0].name, jsonInfoArray.member[0].age);\r\n");
      out.write("				\r\n");
      out.write("				//문자열로 전환\r\n");
      out.write("				var jsonArrayStr = JSON.stringify(jsonInfoArray);\r\n");
      out.write("				console.log(jsonArrayStr);\r\n");
      out.write("				\r\n");
      out.write("				//객체로 전환\r\n");
      out.write("				var jsonObjArray = JSON.parse(jsonArrayStr);\r\n");
      out.write("				console.log(jsonObjArray);\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			$(\"#checkJson4\").click(function(){\r\n");
      out.write("				var _jsonInfoArray = {\r\n");
      out.write("					member: [ \r\n");
      out.write("						{name:\"홍길동\", age:10, gender:\"남자\", nickname:\"돌이\" },\r\n");
      out.write("						{name:\"동순이\", age:11, gender:\"여자\", nickname:\"순둥이\" },\r\n");
      out.write("						{name:\"길순이\", age:12, gender:\"여자\", nickname:\"뺑실이\" }\r\n");
      out.write("						]\r\n");
      out.write("				};\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					type: \"post\",\r\n");
      out.write("					url: \"/webjsp/json\",\r\n");
      out.write("					async: false, //서버 응답까지 대기(동기) / true: 비동기\r\n");
      out.write("					data: {\r\n");
      out.write("						jsonInfoArray: JSON.stringify(_jsonInfoArray)\r\n");
      out.write("					},\r\n");
      out.write("					dataType: \"text\",\r\n");
      out.write("					success : function(data, textStatus) {// 서버에서 받은 데이터/요청상태 출력\r\n");
      out.write("						console.log(\"정상 처리\");\r\n");
      out.write("						\r\n");
      out.write("						console.log(\"서버로부터받은 JSON객체 문자열\");\r\n");
      out.write("						console.log(data);\r\n");
      out.write("						\r\n");
      out.write("						let jsonMembers = JSON.parse(data);\r\n");
      out.write("						console.log(jsonMembers.members);\r\n");
      out.write("						\r\n");
      out.write("						let html_out = `\r\n");
      out.write("							<table class=\"table\">\r\n");
      out.write("							  <thead>\r\n");
      out.write("							    <tr>\r\n");
      out.write("							      <th scope=\"col\">나이</th>\r\n");
      out.write("							      <th scope=\"col\">이름</th>\r\n");
      out.write("							      <th scope=\"col\">성별</th>\r\n");
      out.write("							      <th scope=\"col\">닉네임</th>\r\n");
      out.write("							    </tr>\r\n");
      out.write("							  </thead>\r\n");
      out.write("							  <tbody>\r\n");
      out.write("						`;\r\n");
      out.write("						\r\n");
      out.write("						for(let i=0; i<jsonMembers.members.length; i++) {\r\n");
      out.write("							console.log(jsonMembers.members[i])\r\n");
      out.write("							\r\n");
      out.write("							//개별 속성\r\n");
      out.write("							/*console.log(jsonMembers.members[i].name)\r\n");
      out.write("							console.log(jsonMembers.members[i].age)\r\n");
      out.write("							console.log(jsonMembers.members[i].nickname)\r\n");
      out.write("							console.log(jsonMembers.members[i].gender) */\r\n");
      out.write("							\r\n");
      out.write("							html_out += \"<tr>\"\r\n");
      out.write("								html_out += \"<td>\"+jsonMembers.members[i].name +\"</td>\"\r\n");
      out.write("								html_out += \"<td>\"+jsonMembers.members[i].age+\"</td>\"\r\n");
      out.write("								html_out += \"<td>\"+jsonMembers.members[i].gender+\"</td>\"\r\n");
      out.write("								html_out += \"<td>\"+jsonMembers.members[i].gender+\"</td>\"\r\n");
      out.write("							html_out += \"</tr>\"\r\n");
      out.write("							\r\n");
      out.write("						}// outer for\r\n");
      out.write("						\r\n");
      out.write("						html_out += `\r\n");
      out.write("							</tbody>\r\n");
      out.write("							</table>\r\n");
      out.write("						`;\r\n");
      out.write("						console.log(html_out);\r\n");
      out.write("						$(\"#output\").html(html_out); // HTML객체로 전환\r\n");
      out.write("					},\r\n");
      out.write("					\r\n");
      out.write("					error : function(){ // 요청상태\r\n");
      out.write("						alert(\"에러 발생\");\r\n");
      out.write("					},\r\n");
      out.write("					complete: function() {\r\n");
      out.write("						console.log(\"작업 완료\");\r\n");
      out.write("					}\r\n");
      out.write("				});\r\n");
      out.write("			});\r\n");
      out.write("		});\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
